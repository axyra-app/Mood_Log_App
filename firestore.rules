rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isPsychologist() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'psychologist';
    }
    
    function isUser() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'user';
    }
    
    function isPatientOfPsychologist(patientId, psychologistId) {
      return exists(/databases/$(database)/documents/patients/$(patientId)) &&
             get(/databases/$(database)/documents/patients/$(patientId)).data.psychologistId == psychologistId;
    }
    
    function isParticipantInChat(chatId) {
      return exists(/databases/$(database)/documents/chats/$(chatId)) &&
             request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
    }
    
    function isValidMoodLog(moodLog) {
      return moodLog.mood >= 1 && moodLog.mood <= 5 &&
             moodLog.energy >= 1 && moodLog.energy <= 10 &&
             moodLog.stress >= 1 && moodLog.stress <= 10 &&
             moodLog.sleep >= 1 && moodLog.sleep <= 10;
    }
    
    // Users collection
    match /users/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && request.auth.uid == userId;
    }
    
    // Psychologists collection
    match /psychologists/{psychologistId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && isOwner(psychologistId) && isPsychologist();
    }
    
    // Patients collection
    match /patients/{patientId} {
      allow read, write: if isAuthenticated() && 
        (isOwner(patientId) || 
         (isPsychologist() && isPatientOfPsychologist(patientId, request.auth.uid)));
      allow create: if isAuthenticated() && isPsychologist();
    }
    
    // Mood logs collection
    match /moodLogs/{logId} {
      allow read, write: if isAuthenticated() && 
        (isOwner(resource.data.userId) || 
         (isPsychologist() && isPatientOfPsychologist(resource.data.userId, request.auth.uid)));
      allow create: if isAuthenticated() && 
        (isOwner(request.resource.data.userId) || 
         (isPsychologist() && isPatientOfPsychologist(request.resource.data.userId, request.auth.uid))) &&
        isValidMoodLog(request.resource.data);
    }
    
    // Session notes collection
    match /sessionNotes/{noteId} {
      allow read, write: if isAuthenticated() && 
        (isOwner(resource.data.psychologistId) || 
         (isUser() && isOwner(resource.data.patientId)));
      allow create: if isAuthenticated() && isPsychologist() && 
        isPatientOfPsychologist(request.resource.data.patientId, request.auth.uid);
    }
    
    // Treatment plans collection
    match /treatmentPlans/{planId} {
      allow read, write: if isAuthenticated() && 
        (isOwner(resource.data.psychologistId) || 
         (isUser() && isOwner(resource.data.patientId)));
      allow create: if isAuthenticated() && isPsychologist() && 
        isPatientOfPsychologist(request.resource.data.patientId, request.auth.uid);
    }
    
    // Appointments collection
    match /appointments/{appointmentId} {
      allow read, write: if isAuthenticated() && 
        (isOwner(resource.data.patientId) || isOwner(resource.data.psychologistId));
      allow create: if isAuthenticated() && 
        (isOwner(request.resource.data.patientId) || isOwner(request.resource.data.psychologistId));
    }
    
    // Chats collection
    match /chats/{chatId} {
      allow read, write: if isAuthenticated() && isParticipantInChat(chatId);
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
    }
    
    // Messages subcollection
    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if isAuthenticated() && isParticipantInChat(chatId);
      allow create: if isAuthenticated() && 
        isParticipantInChat(chatId) && 
        request.auth.uid == request.resource.data.senderId;
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read, write: if isAuthenticated() && isOwner(resource.data.userId);
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
    }
    
    // Notification settings collection
    match /notificationSettings/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
    }
    
    // User settings collection
    match /userSettings/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
    }
    
    // User statistics collection
    match /userStats/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
    }
    
    // Analytics cache collection
    match /analyticsCache/{userId} {
      allow read, write: if isAuthenticated() && isOwner(userId);
      allow create: if isAuthenticated() && isOwner(userId);
    }
    
    // Typing indicators collection
    match /typing/{typingId} {
      allow read, write: if isAuthenticated() && 
        request.auth.uid in typingId;
      allow create: if isAuthenticated() && 
        request.auth.uid in typingId;
    }
    
    // Test collection (for connection testing)
    match /test/{document} {
      allow read, write: if isAuthenticated();
    }
    
    // Default deny all other documents
    match /{document=**} {
      allow read, write: if false;
    }
  }
}